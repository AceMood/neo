{"version":3,"sources":["neo.js"],"names":[],"mappings":"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","file":"neo-compiled.js","sourcesContent":["/**\n * The MIT License (MIT)\n * Copyright (c) 2015 AceMood\n *\n * @file Produce Original ResourceMap.\n *     neo.update trigger events below in order:\n *     found          Finder扫描完了工程目录\n *     mapLoaded      缓存的.cache序列化成资源表加载完毕\n *     changed        有文件内容有改动\n *     analyzed       分析改动的文件\n *     mapUpdated     资源表更新完毕\n *     postProcessed  后处理完毕\n *     complete       扫描任务完成\n *     mapStored      资源表写入缓存\n */\n\n/* globals logger */\n\nconst EventEmitter  = require('events').EventEmitter;\nconst log           = require('et-util-logger');\nconst utils         = require('./util');\nconst checker       = require('./core/checker');\nconst ResourceMap   = require('./core/ResourceMap');\nconst Finder        = require('./core/Finder');\nconst MapUpdateTask = require('./core/MapUpdateTask');\nconst MapSerializer = require('./core/MapSerializer');\nconst loaders       = require('./loaders');\n\n/**\n * @param {?LogLevel=} level\n * @return {Logger}\n */\nfunction getLogger(level) {\n  return new log.Logger(level);\n}\n\nclass Neo extends EventEmitter {\n  /**\n   * Register\n   * @param {string} name 加载器名称\n   * @param {ResourceLoader} ResourceLoader 加载器实现\n   */\n  static registerResourceLoader(name, ResourceLoader) {\n    loaders[name] = ResourceLoader;\n  }\n\n  /**\n   * Undo\n   * @param {string} name\n   * @returns {boolean}\n   */\n  static unregisterResourceLoader(name) {\n    return delete loaders[name];\n  }\n\n  /**\n   * @param {Array.<ResourceLoader>} loaders  预置加载器的实例\n   * @param {Array.<string>} scanDirs 要扫描的目录数组, 位置相对于当前执行目录.\n   * @param {?object} options\n   *   options fields：\n   *     checkCircular {boolean=}     是否检查循环依赖, 默认为true\n   *     forceRescan   {boolean=}     是否不读取上次扫描缓存, 默认false\n   *     ignorePaths   {function:boolean=}  返回是否忽略路径的函数\n   *     logLevel      {LogLevel=}    日志输出级别\n   *     maxOpenFiles  {number=}      loaders打开文件的最大数目\n   *     maxProcesses  {number=}      Maximum number of loader forks MapUpdateTask can use\n   *     serializer    {MapSerializer=}  自定义序列化资源表\n   *     useNativeFind {boolean=}     使用linux系统的shell命令还是node实现的方法\n   *     version       {string=}      缓存的版本. 如果版本和缓存不一致则忽略缓存\n   */\n  constructor(loaders, scanDirs, options) {\n    super();\n\n    this.loaders = loaders;\n    this.scanDirs = scanDirs;\n    this.options = options || {};\n    this.finder = this.getFinder();\n    this.serializer = this.options.serializer || new MapSerializer(\n        this.loaders,\n        { version: this.options.version }\n      );\n    this.logger = getLogger(this.options.logLevel || log.Level.ALL);\n    // make logger globally\n    if (!global.logger) {\n      global.logger = this.logger;\n    }\n  }\n\n  /**\n   *  1) load cache if exists\n   *  2) compare to the existing files\n   *  3) analyze changes\n   *  4) update map\n   *  5) write cache back to disk\n   *  6) return map\n   *\n   * @param {string}   path 资源表打印路径\n   * @param {function} callback 升级后回调函数\n   * @param {?object}  options 配置对象\n   */\n  update(path, callback, options) {\n    let map, files;\n    let neo = this;\n\n    /**\n     * 扫描资源后执行升级任务\n     */\n    function update() {\n      if (!map || !files) {\n        return;\n      }\n      let task = neo.createUpdateTask(files, map);\n      task.on('complete', map => {\n        // 首先检查循环依赖\n        if (neo.options.checkCircular !== false) {\n          neo.checkCircular(map);\n        }\n\n        // 只在发生变化后写入资源表\n        let mapChanged = task.changed.length > task.skipped.length;\n        if (mapChanged) {\n          neo.storeMap(path, map, () => {\n            neo.emit('mapStored');\n            callback(map);\n          });\n        } else {\n          callback(map);\n        }\n      }).run();\n    }\n\n    this.finder.find(f => {\n      files = f;\n      // 找到所有的静态文件\n      neo.emit('found', files);\n      update();\n    });\n\n    // 强制创建资源表\n    if (options && options.forceRescan) {\n      map = new ResourceMap();\n    } else {\n      this.loadOrCreateMap(path, m => {\n        map = m;\n        // 加载资源表缓存成功\n        neo.emit('mapLoaded');\n        update();\n      });\n    }\n  }\n\n  /**\n   * 检查资源表中的循环依赖\n   * @param {ResourceMap} map\n   */\n  checkCircular(map) {\n    // 构建简版资源表\n    let localResourceMap = {};\n    map.getAllResources().forEach(resource => {\n      if (resource.type === 'js') {\n        localResourceMap[resource.id] = resource.requiredModules;\n      } else if (resource.type === 'css') {\n        localResourceMap[resource.id] = resource.requiredCSS;\n      }\n    });\n    // 检查\n    let visited = {};\n    map.getAllResources().forEach(resource => {\n      if (resource.type === 'js' || resource.type === 'css') {\n        let stack = [];\n        checker.checkCircular(localResourceMap, resource.id, visited, stack);\n        if (stack.length !== 0) {\n          let msg = stack.join('\\n');\n          logger.error(`Circular dependency occurred! Start from: ${msg}`);\n          process.exit(0);\n        }\n      }\n    });\n  }\n\n  /**\n   * 更新资源表, 传入回调函数, 但是也必须传入资源表对象.\n   * @param {ResourceMap} map\n   * @param {function} callback\n   */\n  updateMap(map, callback) {\n    // files数组包含文件名和mtime\n    this.finder.find(files => {\n      this.createUpdateTask(files, map)\n        .on('complete', callback)\n        .run();\n    });\n  }\n\n  /**\n   * 异步加载资源表若没有则创建一个\n   * @param {string} path\n   * @param {function} callback\n   */\n  loadOrCreateMap(path, callback) {\n    this.serializer.load(path, (err, map) => {\n      if (err) {\n        logger.warn('Load cache error ' + err.message);\n      }\n      callback(map || new ResourceMap());\n    });\n  }\n\n  /**\n   * 将资源表缓存到本地文件\n   * @param {string} path\n   * @param {ResourceMap} map\n   * @param {function} callback\n   */\n  storeMap(path, map, callback) {\n    this.serializer.store(path, map, callback);\n  }\n\n  /**\n   * Create MapUpdateTask\n   * @param  {Array} files\n   * @param  {ResourceMap} map\n   * @return {MapUpdateTask}\n   */\n  createUpdateTask(files, map) {\n    let task = new MapUpdateTask(files, this.loaders, map, {\n      maxOpenFiles: this.options.maxOpenFiles,\n      maxProcesses: this.options.maxProcesses\n    });\n\n    let events = [\n      'changed',\n      'analyzed',\n      'mapUpdated',\n      'postProcessed',\n      'complete'\n    ];\n\n    let neo = this;\n    events.forEach(name => {\n      task.on(name, value => {\n        neo.emit(name, value);\n      });\n    });\n\n    return task;\n  }\n\n  /**\n   * Return a FileFinder\n   * @return {object}\n   */\n  getFinder() {\n    let ext = {};\n    this.loaders.forEach(loader => {\n      loader.getExtensions().forEach(e => {\n        ext[e] = true;\n      });\n    });\n    this.finder = Finder(\n      this.scanDirs,\n      Object.keys(ext),\n      this.options.ignorePaths || utils.fnIgnore,\n      this.options.useNativeFind\n    );\n    return this.finder;\n  }\n}\n\n// exports for external APIs\nObject.defineProperty(Neo, 'Loaders', {\n  enumerable: true,\n  value: loaders\n});\n\nObject.defineProperty(Neo, 'Resource', {\n  enumerable: true,\n  value: require('./resource/Resource')\n});\n\nmodule.exports = Neo;"]}